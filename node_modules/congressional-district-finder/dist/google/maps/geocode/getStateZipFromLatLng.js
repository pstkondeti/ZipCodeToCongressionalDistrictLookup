'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.INVALID_REQUEST = exports.NO_RESULTS_FOUND = exports.endpoint = undefined;
exports.default = getStateZipFromLatLng;

var _requestPromiseNative = require('request-promise-native');

var _requestPromiseNative2 = _interopRequireDefault(_requestPromiseNative);

var _isValidGeoCoordinates = require('../../../geolib/isValidGeoCoordinates');

var _isValidGeoCoordinates2 = _interopRequireDefault(_isValidGeoCoordinates);

var _parseJSON = require('./parseJSON');

var _parseJSON2 = _interopRequireDefault(_parseJSON);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var endpoint = exports.endpoint = function endpoint(lat, lng) {
    return 'https://maps.googleapis.com/maps/api/geocode/json?latlng=' + lat + ',' + lng;
};

var NO_RESULTS_FOUND = exports.NO_RESULTS_FOUND = function NO_RESULTS_FOUND(lat, lng) {
    return 'No results found for latitude: "' + lat + '", longitude: "' + lng + '"';
};

var INVALID_REQUEST = exports.INVALID_REQUEST = function INVALID_REQUEST(lat, lng) {
    return 'Invalid parameters for latitude: "' + lat + '", longitude: "' + lng + '".';
};

/**
 * Uses the Google Maps Geocode endpoint to determine country,
 * state and zip for a pair of latitude and longitude coordinates.
 * @see https://maps.googleapis.com/maps/api/geocode/json
 * @param {number} latitude
 * @param {number} longitude
 * @returns {Promise}
 *     Rejects w/ a 404 if coordinates fail to match a location.
 *     Rejects w/ a 400 if the coordinates are invalid.
 *     Resolves w/ the following:
 *          country {string}
 *          st {string} - Postal abbreviation if location is in US.
 *          zip {string} - 5 character zip code if location is in the US.
 */
function getStateZipFromLatLng(lat, lng) {

    if (!(0, _isValidGeoCoordinates2.default)([lng, lat])) {
        return Promise.reject({
            statusCode: 400,
            // eslint-disable-next-line babel/new-cap
            message: INVALID_REQUEST(lat, lng)
        });
    }

    return _requestPromiseNative2.default.get({
        json: true,
        uri: endpoint(lat, lng)
    }).then(function (data) {
        var status = data.status;


        switch (status) {

            case 'OK':
                return data;

            case 'ZERO_RESULTS':
                return Promise.reject({
                    statusCode: 404,
                    // eslint-disable-next-line babel/new-cap
                    message: NO_RESULTS_FOUND(lat, lng)
                });

            default:
                return Promise.reject({
                    statusCode: 400,
                    // eslint-disable-next-line babel/new-cap
                    message: INVALID_REQUEST(lat, lng)
                });
        }
    }).then(_parseJSON2.default);
}