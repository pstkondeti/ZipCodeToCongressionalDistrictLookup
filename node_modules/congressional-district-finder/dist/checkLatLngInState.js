'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getStateShape = require('./github/unitedstates/getStateShape');

var _getStateShape2 = _interopRequireDefault(_getStateShape);

var _isLatLngInMultiPolygon = require('./geolib/isLatLngInMultiPolygon');

var _isLatLngInMultiPolygon2 = _interopRequireDefault(_isLatLngInMultiPolygon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Fetches GeoJSON boundaries for a US State and
 * verifies that a latitude and longitude are within those boundaries
 * GeoJSON ata for state boundaries hosted by github.com/unitedstates.
 * @see https://github.com/unitedstates/districts
 * @param {number} latitude
 * @param {number} longitude
 * @param  {string} st - Postal code abbreviation for US state. Ex: AL.
 * @returns {Promise} - Resolves with the following:
 *      isMatched {boolean} - Do the lat, lng reside in the state?
 *      stateId {string} - Provided postal code for US state. Ex: AL
 *      latitude {number} - The latitude provided.
 *      longitude {number} - The longitude provided.
 */
function checkLatLngInState(lat, lng, stateId) {
    return (0, _getStateShape2.default)(stateId).then(function (_ref) {
        var polygons = _ref.polygons;


        var isMatched = (0, _isLatLngInMultiPolygon2.default)(lat, lng, polygons);
        return {
            isMatched: isMatched,
            stateId: stateId,
            latitude: lat,
            longitude: lng
        };
    });
}

exports.default = checkLatLngInState;